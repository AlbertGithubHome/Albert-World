# 494.目标和

### 题目

494. 目标和

给你一个整数数组 nums 和一个整数 target 。

向数组中的每个整数前添加 '+' 或 '-' ，然后串联起所有整数，可以构造一个 表达式 ：

   - 例如，nums = [2, 1] ，可以在 2 之前添加 '+' ，在 1 之前添加 '-' ，然后串联起来得到表达式 "+2-1" 。

返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。



示例 1：
````
输入：nums = [1,1,1,1,1], target = 3
输出：5
解释：一共有 5 种方法让最终目标和为 3 。
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3
```
示例 2：
```
输入：nums = [1], target = 1
输出：1
```


提示：
```
    1 <= nums.length <= 20
    0 <= nums[i] <= 1000
    0 <= sum(nums[i]) <= 1000
    -1000 <= target <= 100
```
通过次数114,441
提交次数232,533
请问您在哪类招聘中遇到此题？
贡献者
LeetCode
给表达式添加运算符
困难



### 解题思路
a: 添加正号数字的和
b: 添加负号数字的和（绝对值）

a + b = sum;
a - b = target;

找到满足条件的a和b有多少种？

因为是二元一次方程，所有a确定则b确定 => a = (sum + target) / 2;
因为都是正整数，所以 a 必须为非负偶数，所以a不满足这个条件可以直接返回0

然后转化成从n个商品中选择重量为a的商品装进0-1背包的问题

### 代码

```cpp
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int diff = sum + target;
        if (diff < 0 || diff % 2 ) return 0;

        int n = nums.size(), some = diff / 2;
        vector<int> dp(some + 1);
        dp[0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = some; ~j; j--) {
                if (j >= nums[i-1]) dp[j] += dp[j - nums[i-1]];
            }
        }
        return dp[some];
    }
};
```

![图片.png](https://pic.leetcode-cn.com/1623083572-vnwDTM-%E5%9B%BE%E7%89%87.png)
