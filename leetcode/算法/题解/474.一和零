# 474.一和零

### 题目


474. 一和零

给你一个二进制字符串数组 strs 和两个整数 m 和 n 。

请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。

如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。



示例 1：
```
输入：strs = ["10", "0001", "111001", "1", "0"], m = 5, n = 3
输出：4
解释：最多有 5 个 0 和 3 个 1 的最大子集是 {"10","0001","1","0"} ，因此答案是 4 。
其他满足题意但较小的子集包括 {"0001","1"} 和 {"10","1","0"} 。{"111001"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。
```
示例 2：
```
输入：strs = ["10", "0", "1"], m = 1, n = 1
输出：2
解释：最大的子集是 {"0", "1"} ，所以答案是 2 。
```


提示：
```
    1 <= strs.length <= 600
    1 <= strs[i].length <= 100
    strs[i] 仅由 '0' 和 '1' 组成
    1 <= m, n <= 100
```
通过次数61,957
提交次数103,249
请问您在哪类招聘中遇到此题？
贡献者


### 解题思路
一个二维限制的背包问题
0-1 背包
这个是求满足条件的方案数的，参考一维的 [494. Target Sum](https://leetcode-cn.com/problems/target-sum/solution/c-dong-tai-gui-hua-by-alberts-2-0lbc/)

### 代码

```cpp
class Solution {
public:
    pair<int, int> count(string& s) {
        pair<int, int> p;
        for (auto& c : s) {
            if (c == '0') p.first++; else p.second++;
        }
        return p;
    }

    int findMaxForm(vector<string>& strs, int m, int n) {
        int length = strs.size(), zeros, ones;
        vector<vector<int>> dp(m + 1, vector<int>(n + 1));

        for (int i = 1; i <= length; i++) {
            std::tie(zeros, ones) = count(strs[i-1]);
            for (int j = m; ~j; j--) {
                for (int k = n; ~k; k--) {
                    if (j >= zeros && k >= ones) {
                        dp[j][k] = max(dp[j][k], dp[j - zeros][k - ones] + 1);
                    }
                }
            }
        }
        return dp[m][n];
    }
};
```

![图片.png](https://pic.leetcode-cn.com/1623085212-djqmjo-%E5%9B%BE%E7%89%87.png)
